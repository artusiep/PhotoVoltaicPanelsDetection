import logging
from dataclasses import dataclass

import cv2
import numpy as np


@dataclass
class SegmentDetectorParams:
    """Parameters used by the :class:`.SegmentDetector`.
    Initializes the segment detector parameters to their default value.

    Attributes:
        :param d_rho: Distance resolution in pixels of the Hough parameter space.
        :param d_theta: Angle resolution in pixels of the Hough parameter space expressed in radiants.
        :param min_number_votes: Minimum number of votes in the Hough space to accept a segment.
        :param min_line_length: Minimum line length for segment acceptance expressed in pixel units.
        :param max_line_gap: Different segments who present a gap smaller than this parameter are detected as a single segment.
        :param extension_pixels: All the detected segments are extended by this amount of pixels on each side.
    """

    # Distance resolution in pixels of the Hough grid.
    d_rho: float = 1.0
    # Angular resolution in radians of the Hough grid.
    d_theta: float = np.pi / 180
    # Minimum number of votes (intersections in Hough grid cell).
    min_num_votes: int = 60
    # Minimum number of pixels making up a line.
    min_line_length: int = 50
    # Maximum gap in pixels between connectible line segments.
    max_line_gap: int = 150
    # Number of pixels to extend each segment on each side.
    extension_pixels: int = 10


class SegmentDetector:
    """Class responsible for detecting segments in the edge image generated by :class:`EdgeDetector`."""

    def __init__(self, input_image: np.ndarray, params=SegmentDetectorParams()):
        """Initializes the segment detector with the binary input image and the segment detector parameters.

        :param input_image: Binary edge image (usually generated by :class:`EdgeDetector`.
        :param params: Segment detector parameters to be used for segment detection.
        """
        self.input_image = input_image
        self.params = params
        # Output "lines" is an array containing endpoints of detected line segments.
        self.segments = None

    def detect(self):
        """Detects the segments in the input image using the parameters passed as argument using a probilistic Hough transform.
        """
        # Logger.debug("Detecting segments")
        self.segments = cv2.HoughLinesP(image=self.input_image, rho=self.params.d_rho,
                                        theta=self.params.d_theta,
                                        threshold=self.params.min_num_votes,
                                        minLineLength=self.params.min_line_length,
                                        maxLineGap=self.params.max_line_gap)

        # If no segments have been found, return an empty array.
        if self.segments is None:
            logging.warning("No segments were detected")
            self.segments = np.empty(shape=(0, 4))
            return

        # Otherwise need to reshape the segment array, and to extend the segments on each side to allow better
        # intersection detection.
        self.segments = np.squeeze(self.segments)
        if len(self.segments.shape) <= 1:
            self.segments = np.array([self.segments])
        self.__extend_segments()

    def __extend_segments(self):
        """Extends each segment by the parameters defined in self.params.extension_pixels.
        """
        dxs = self.segments[:, 2] - self.segments[:, 0]
        dys = self.segments[:, 3] - self.segments[:, 1]
        directions = np.vstack((dxs, dys)).T.astype(np.float32)
        norms = np.linalg.norm(directions, axis=1)
        directions /= norms[:, None]
        directions *= self.params.extension_pixels

        self.segments = np.int32(np.hstack((self.segments[:, 0:2] - directions, self.segments[:, 2:4] + directions)))
